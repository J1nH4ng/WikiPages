import{f as A,D as t,c as u,o as r,aq as E,b,k as l,H as n,w as o,a,ar as m}from"./chunks/framework.D90EkY4s.js";const C=JSON.parse('{"title":"负载均衡详解","description":"负载均衡详解文档","frontmatter":{"title":"负载均衡详解","editLink":true,"description":"负载均衡详解文档","layout":"doc","head":[["meta",{"name":"keywords","content":"Proxy, LoadBalance"}]],"outline":"deep","prev":{"text":null,"link":null},"next":{"text":null,"link":null}},"headers":[],"relativePath":"posts/bedd4708.md","filePath":"docs/proxy/introduce.md","lastUpdated":1748247409000}'),B={name:"posts/bedd4708.md"};function _(c,e,f,D,x,k){const i=t("Mermaid"),s=t("sapn"),d=t("NolebaseGitContributors"),p=t("NolebaseGitChangelog");return r(),u("div",null,[e[4]||(e[4]=E('<h1 id="负载均衡详解" tabindex="-1">负载均衡详解 <a class="header-anchor" href="#负载均衡详解" aria-label="Permalink to &quot;负载均衡详解&quot;">​</a></h1><p>负载均衡（Load Balancing）是一种将网络流量、请求或工作负载分配到多个服务器或计算资源上的技术，旨在优化系统资源使用、最大化吞吐量、最小化响应时间，并避免过载任何一个节点。其主要目的是提高系统的性能、可靠性和可扩展性。</p><p>在高流量或高负载的网络环境中，单个服务器可能无法处理所有的请求或工作负载，这时负载均衡技术就显得尤为重要。通过将请求均匀地分发到多台服务器上，负载均衡可以有效分散每个服务器的工作负担，从而提高整体系统的响应速度和可用性。</p><p>负载均衡通常用于网络服务器、Web 服务器、应用程序服务器和其他计算资源，以分散请求并优化资源利用。</p><h2 id="解决的问题" tabindex="-1">解决的问题 <a class="header-anchor" href="#解决的问题" aria-label="Permalink to &quot;解决的问题&quot;">​</a></h2><p>没有无缘无故的技术出现，技术的出现是为了问题的解决，负载均衡技术主要的解决的问题如下：</p><ul><li>分发流量：能够将大规模并发访问和数据流量分发到多台内部服务器上，减少用户的等待时间</li><li>计算优化：当有重负载的计算请求时，能够将请求分解成多个任务，并将这些任务分配到内部的多个计算服务器上，收集处理内部计算服务器的处理结果，汇总结果并返回给用户</li><li>故障转移：当某个服务器发生故障时，可以自动将流量转移至其他正常运行的服务器</li><li>高可用性：通过分布式架构，确保服务持续可用</li><li>性能优化：平衡服务器负载，减少响应时间，提供整体系统性能</li><li>灵活拓展：支持系统资源的横向拓展，满足动态流量需求</li></ul><p>负载均衡的本质就是数据包的转发，即如何将数据包转发到负载最小的服务器上去，常见的解决办法如下：</p><ul><li>硬件：F5</li><li>软件：LVS/Nginx/HAProxy + Keepalived</li></ul><p>负载均衡器位于用户请求和服务器之间，作为一个中间层，接受用户请求并根据预设策略分配流量，具体工作方式如下：</p>',10)),(r(),b(m,null,{default:o(()=>[n(i,{id:"mermaid-68",class:"mermaid",graph:"---%0Atitle%3A%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%0A---%0A%0Aflowchart%20LR%0A%20%20%20%20user_request%5B%22%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%22%5D%0A%20%20%20%20load_balance%5B%22%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%22%5D%0A%20%20%20%20web_server_1%5B%22%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%201%22%5D%0A%20%20%20%20web_server_2%5B%22%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%202%22%5D%0A%20%20%20%20web_server_3%5B%22%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%203%22%5D%0A%20%20%20%20user_request%20--%3E%20load_balance%0A%20%20%20%20load_balance%20--%3E%20web_server_1%0A%20%20%20%20load_balance%20--%3E%20web_server_2%0A%20%20%20%20load_balance%20--%3E%20web_server_3%0A"})]),fallback:o(()=>e[0]||(e[0]=[a(" Loading... ")])),_:1})),e[5]||(e[5]=l("h2",{id:"负载均衡的分类",tabindex:"-1"},[a("负载均衡的分类 "),l("a",{class:"header-anchor",href:"#负载均衡的分类","aria-label":'Permalink to "负载均衡的分类"'},"​")],-1)),e[6]||(e[6]=l("h3",{id:"网络层次",tabindex:"-1"},[a("网络层次 "),l("a",{class:"header-anchor",href:"#网络层次","aria-label":'Permalink to "网络层次"'},"​")],-1)),e[7]||(e[7]=l("p",null,"从网络层次的角度来看，即从 OSI 七层网络模型的角度来说，负载均衡主要有如下几种类型：",-1)),e[8]||(e[8]=l("ul",null,[l("li",null,"二层负载均衡：外部对一个虚拟的 MAC 地址进行请求，负载均衡器接收后再分配到真实的 MAC 地址进行响应"),l("li",null,"三层负载均衡：外部对一个虚拟的 IP 地址进行请求，负载均衡器接收后分配到实际的 IP 地址响应（即一个 IP 地址对一个 IP 地址的转发，端口全放开）"),l("li",null,"四层负载均衡：在三层负载均衡的基础上，从第四层“传输层”开始，使用虚拟的 IP 地址 + 端口的方式接收请求，然后再转发到对应的服务器"),l("li",null,"七层负载均衡：从第七层“应用层”开始，根据虚拟的 URL 或者 IP 地址、主机名接收请求，然后再转发到对应的服务器进行处理")],-1)),l("p",null,[e[2]||(e[2]=a("在运维的日常工作中，主要使用的是四层与七层负载均衡，这里也着重介绍这两种负载均衡方式，而所谓的")),n(s,{class:"marker-evy"},{default:o(()=>e[1]||(e[1]=[a("反向代理服务器即实际意义上的七层负载均衡器")])),_:1}),e[3]||(e[3]=a("。"))]),n(d),n(p)])}const v=A(B,[["render",_]]);export{C as __pageData,v as default};
