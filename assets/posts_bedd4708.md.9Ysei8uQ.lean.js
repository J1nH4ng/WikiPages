import{_ as i,C as s,c as t,o as p,aq as r,G as e}from"./chunks/framework.pQnWedaC.js";const g=JSON.parse('{"title":"负载均衡详解","description":"负载均衡详解文档","frontmatter":{"title":"负载均衡详解","editLink":true,"description":"负载均衡详解文档","layout":"doc","head":[["meta",{"name":"keywords","content":"Proxy, LoadBalance"}]],"outline":"deep","prev":{"text":null,"link":null},"next":{"text":null,"link":null}},"headers":[],"relativePath":"posts/bedd4708.md","filePath":"docs/proxy/introduce.md","lastUpdated":1747820022000}'),o={name:"posts/bedd4708.md"};function d(c,a,h,u,b,m){const n=s("NolebaseGitContributors"),l=s("NolebaseGitChangelog");return p(),t("div",null,[a[0]||(a[0]=r(`<h1 id="负载均衡详解" tabindex="-1">负载均衡详解 <a class="header-anchor" href="#负载均衡详解" aria-label="Permalink to &quot;负载均衡详解&quot;">​</a></h1><p>负载均衡（Load Balancing）是一种将网络流量、请求或工作负载分配到多个服务器或计算资源上的技术，旨在优化系统资源使用、最大化吞吐量、最小化响应时间，并避免过载任何一个节点。其主要目的是提高系统的性能、可靠性和可扩展性。</p><p>在高流量或高负载的网络环境中，单个服务器可能无法处理所有的请求或工作负载，这时负载均衡技术就显得尤为重要。通过将请求均匀地分发到多台服务器上，负载均衡可以有效分散每个服务器的工作负担，从而提高整体系统的响应速度和可用性。</p><p>负载均衡通常用于网络服务器、Web 服务器、应用程序服务器和其他计算资源，以分散请求并优化资源利用。</p><h2 id="解决的问题" tabindex="-1">解决的问题 <a class="header-anchor" href="#解决的问题" aria-label="Permalink to &quot;解决的问题&quot;">​</a></h2><p>没有无缘无故的技术出现，技术的出现是为了问题的解决，负载均衡技术主要的解决的问题如下：</p><ul><li>分发流量：能够将大规模并发访问和数据流量分发到多台内部服务器上，减少用户的等待时间</li><li>计算优化：当有重负载的计算请求时，能够将请求分解成多个任务，并将这些任务分配到内部的多个计算服务器上，收集处理内部计算服务器的处理结果，汇总结果并返回给用户</li><li>故障转移：当某个服务器发生故障时，可以自动将流量转移至其他正常运行的服务器</li><li>高可用性：通过分布式架构，确保服务持续可用</li><li>性能优化：平衡服务器负载，减少响应时间，提供整体系统性能</li><li>灵活拓展：支持系统资源的横向拓展，满足动态流量需求</li></ul><p>负载均衡的本质就是数据包的转发，即如何将数据包转发到负载最小的服务器上去，常见的解决办法如下：</p><ul><li>硬件：F5</li><li>软件：LVS + Keepalived</li></ul><p>负载均衡器位于用户请求和服务器之间，作为一个中间层，接受用户请求并根据预设策略分配流量，具体工作方式如下：</p><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes rose-pine-dawn rose-pine-moon vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">---</span></span>
<span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">title: 负载均衡的工作方式</span></span>
<span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">    user_request[&quot;用户请求&quot;]</span></span>
<span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">    load_balance[&quot;负载均衡器&quot;]</span></span>
<span class="line"><span style="--shiki-light:#575279;--shiki-dark:#E0DEF4;">    user_request --&gt; load_balance</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="负载均衡的分类" tabindex="-1">负载均衡的分类 <a class="header-anchor" href="#负载均衡的分类" aria-label="Permalink to &quot;负载均衡的分类&quot;">​</a></h2><h3 id="网络层次" tabindex="-1">网络层次 <a class="header-anchor" href="#网络层次" aria-label="Permalink to &quot;网络层次&quot;">​</a></h3><p>从网络层次的角度来看，负载均衡主要有如下几种类型：</p><ul><li>二层负载均衡：即通过一个虚拟的 MAC 地址接受请求，然后再分配到真实的 MAC 地址</li><li>三层负载均衡：</li><li>四层负载均衡：</li><li>七层负载均衡：</li></ul>`,15)),e(n),e(l)])}const _=i(o,[["render",d]]);export{g as __pageData,_ as default};
